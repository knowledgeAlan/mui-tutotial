{
    "sourceFile": "datagrid-example/src/app/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1717146470121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717146483379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import Image from \"next/image\";\n \n export default function Home() {\n   return (\n-    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n+    <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n       test\n     </main>\n   );\n }\n"
                },
                {
                    "date": 1717147163144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,48 @@\n-import Image from \"next/image\";\n+import React,{useEffect,useState} from \"react\";\n \n+import Button from '@mui/material/Button';\n+import { DataGrid, useGridApiRef } from '@mui/x-data-grid';\n+import type { GridPaginationMeta } from '@mui/x-data-grid';\n+import { createFakeServer } from '@mui/x-data-grid-generator';\n+\n export default function Home() {\n+\n+  const [rows, setRows] = useState([]);\n+const [paginationModel, setPaginationModel] = useState({\n+  page: 0,\n+  pageSize: 10,\n+});\n+const [filterModel, setFilterModel] = React.useState({ items: [] });\n+const [sortModel, setSortModel] = React.useState([]);\n   return (\n     <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n-      test\n+      React.useEffect(() => {\n+  const fetcher = async () => {\n+    // fetch data from server\n+    const data = await fetch('https://my-api.com/data', {\n+      method: 'GET',\n+      body: JSON.stringify({\n+        page: paginationModel.page,\n+        pageSize: paginationModel.pageSize,\n+        sortModel,\n+        filterModel,\n+      }),\n+    });\n+    setRows(data.rows);\n+  };\n+  fetcher();\n+}, [paginationModel, sortModel, filterModel]);\n+\n+<DataGridPro\n+  columns={columns}\n+  pagination\n+  sortingMode=\"server\"\n+  filterMode=\"server\"\n+  paginationMode=\"server\"\n+  onPaginationModelChange={setPaginationModel}\n+  onSortModelChange={setSortModel}\n+  onFilterModelChange={setFilterModel}\n+/>;\n     </main>\n   );\n }\n"
                },
                {
                    "date": 1717147173285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,14 @@\n import { DataGrid, useGridApiRef } from '@mui/x-data-grid';\n import type { GridPaginationMeta } from '@mui/x-data-grid';\n import { createFakeServer } from '@mui/x-data-grid-generator';\n \n+const SERVER_OPTIONS = {\n+  useCursorPagination: false,\n+};\n+\n+const { useQuery, ...data } = createFakeServer({ rowLength: 1000 }, SERVER_OPTIONS);\n+\n export default function Home() {\n \n   const [rows, setRows] = useState([]);\n const [paginationModel, setPaginationModel] = useState({\n"
                },
                {
                    "date": 1717147208021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,43 +12,51 @@\n const { useQuery, ...data } = createFakeServer({ rowLength: 1000 }, SERVER_OPTIONS);\n \n export default function Home() {\n \n-  const [rows, setRows] = useState([]);\n-const [paginationModel, setPaginationModel] = useState({\n-  page: 0,\n-  pageSize: 10,\n-});\n-const [filterModel, setFilterModel] = React.useState({ items: [] });\n-const [sortModel, setSortModel] = React.useState([]);\n+  const apiRef = useGridApiRef();\n+  const [paginationModel, setPaginationModel] = React.useState({\n+    page: 0,\n+    pageSize: 50,\n+  });\n+\n+  const {\n+    isLoading,\n+    rows,\n+    pageInfo: { hasNextPage },\n+  } = useQuery(paginationModel);\n+\n+  const paginationMetaRef = React.useRef<GridPaginationMeta>({});\n+  // Memoize to avoid flickering when the `hasNextPage` is `undefined` during refetch\n+  const paginationMeta = React.useMemo(() => {\n+    if (\n+      hasNextPage !== undefined &&\n+      paginationMetaRef.current?.hasNextPage !== hasNextPage\n+    ) {\n+      paginationMetaRef.current = { hasNextPage };\n+    }\n+    return paginationMetaRef.current;\n+  }, [hasNextPage]);\n+\n+\n+\n   return (\n     <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n-      React.useEffect(() => {\n-  const fetcher = async () => {\n-    // fetch data from server\n-    const data = await fetch('https://my-api.com/data', {\n-      method: 'GET',\n-      body: JSON.stringify({\n-        page: paginationModel.page,\n-        pageSize: paginationModel.pageSize,\n-        sortModel,\n-        filterModel,\n-      }),\n-    });\n-    setRows(data.rows);\n-  };\n-  fetcher();\n-}, [paginationModel, sortModel, filterModel]);\n-\n-<DataGridPro\n-  columns={columns}\n-  pagination\n-  sortingMode=\"server\"\n-  filterMode=\"server\"\n-  paginationMode=\"server\"\n-  onPaginationModelChange={setPaginationModel}\n-  onSortModelChange={setSortModel}\n-  onFilterModelChange={setFilterModel}\n-/>;\n+          <Button onClick={() => apiRef.current.setRowCount(1000)}>Set Row Count</Button>\n+      <div style={{ height: 400 }}>\n+        <DataGrid\n+          apiRef={apiRef}\n+          rows={rows}\n+          {...data}\n+          initialState={{ ...data.initialState, pagination: { rowCount: -1 } }}\n+          estimatedRowCount={100}\n+          paginationMeta={paginationMeta}\n+          loading={isLoading}\n+          pageSizeOptions={[10, 25, 50, 100]}\n+          paginationModel={paginationModel}\n+          paginationMode=\"server\"\n+          onPaginationModelChange={setPaginationModel}\n+        />\n+      </div>\n     </main>\n   );\n }\n"
                },
                {
                    "date": 1717147291379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+'use client'\n import React,{useEffect,useState} from \"react\";\n \n import Button from '@mui/material/Button';\n import { DataGrid, useGridApiRef } from '@mui/x-data-grid';\n"
                },
                {
                    "date": 1717147306813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \n \n   return (\n     <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n-          <Button onClick={() => apiRef.current.setRowCount(1000)}>Set Row Count</Button>\n+          \n       <div style={{ height: 400 }}>\n         <DataGrid\n           apiRef={apiRef}\n           rows={rows}\n"
                },
                {
                    "date": 1717147344204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+'use client'\n+import React,{useEffect,useState} from \"react\";\n+\n+import Button from '@mui/material/Button';\n+import { DataGrid, useGridApiRef } from '@mui/x-data-grid';\n+import type { GridPaginationMeta } from '@mui/x-data-grid';\n+import { createFakeServer } from '@mui/x-data-grid-generator';\n+\n+const SERVER_OPTIONS = {\n+  useCursorPagination: false,\n+};\n+\n+const { useQuery, ...data } = createFakeServer({ rowLength: 1000 }, SERVER_OPTIONS);\n+\n+export default function Home() {\n+\n+  const apiRef = useGridApiRef();\n+  const [paginationModel, setPaginationModel] = React.useState({\n+    page: 0,\n+    pageSize: 50,\n+  });\n+\n+  const {\n+    isLoading,\n+    rows,\n+    pageInfo: { hasNextPage },\n+  } = useQuery(paginationModel);\n+\n+  const paginationMetaRef = React.useRef<GridPaginationMeta>({});\n+  // Memoize to avoid flickering when the `hasNextPage` is `undefined` during refetch\n+  const paginationMeta = React.useMemo(() => {\n+    if (\n+      hasNextPage !== undefined &&\n+      paginationMetaRef.current?.hasNextPage !== hasNextPage\n+    ) {\n+      paginationMetaRef.current = { hasNextPage };\n+    }\n+    return paginationMetaRef.current;\n+  }, [hasNextPage]);\n+\n+\n+\n+  return (\n+    <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n+          \n+      <div style={{ height: 400,width: '100%'  }}>\n+        <DataGrid\n+          apiRef={apiRef}\n+          rows={rows}\n+          {...data}\n+          initialState={{ ...data.initialState, pagination: { rowCount: -1 } }}\n+          estimatedRowCount={100}\n+          paginationMeta={paginationMeta}\n+          loading={isLoading}\n+          pageSizeOptions={[10, 25, 50, 100]}\n+          paginationModel={paginationModel}\n+          paginationMode=\"server\"\n+          onPaginationModelChange={setPaginationModel}\n+        />\n+      </div>\n+    </main>\n+  );\n+}\n"
                },
                {
                    "date": 1717147356367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,72 +44,9 @@\n     <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n           \n       <div style={{ height: 400,width: '100%'  }}>\n         <DataGrid\n-          apiRef={apiRef}\n-          rows={rows}\n-          {...data}\n-          initialState={{ ...data.initialState, pagination: { rowCount: -1 } }}\n-          estimatedRowCount={100}\n-          paginationMeta={paginationMeta}\n-          loading={isLoading}\n-          pageSizeOptions={[10, 25, 50, 100]}\n-          paginationModel={paginationModel}\n-          paginationMode=\"server\"\n-          onPaginationModelChange={setPaginationModel}\n-        />\n-      </div>\n-    </main>\n-  );\n-}\n-'use client'\n-import React,{useEffect,useState} from \"react\";\n-\n-import Button from '@mui/material/Button';\n-import { DataGrid, useGridApiRef } from '@mui/x-data-grid';\n-import type { GridPaginationMeta } from '@mui/x-data-grid';\n-import { createFakeServer } from '@mui/x-data-grid-generator';\n-\n-const SERVER_OPTIONS = {\n-  useCursorPagination: false,\n-};\n-\n-const { useQuery, ...data } = createFakeServer({ rowLength: 1000 }, SERVER_OPTIONS);\n-\n-export default function Home() {\n-\n-  const apiRef = useGridApiRef();\n-  const [paginationModel, setPaginationModel] = React.useState({\n-    page: 0,\n-    pageSize: 50,\n-  });\n-\n-  const {\n-    isLoading,\n-    rows,\n-    pageInfo: { hasNextPage },\n-  } = useQuery(paginationModel);\n-\n-  const paginationMetaRef = React.useRef<GridPaginationMeta>({});\n-  // Memoize to avoid flickering when the `hasNextPage` is `undefined` during refetch\n-  const paginationMeta = React.useMemo(() => {\n-    if (\n-      hasNextPage !== undefined &&\n-      paginationMetaRef.current?.hasNextPage !== hasNextPage\n-    ) {\n-      paginationMetaRef.current = { hasNextPage };\n-    }\n-    return paginationMetaRef.current;\n-  }, [hasNextPage]);\n-\n-\n-\n-  return (\n-    <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n           \n-      <div style={{ height: 400 }}>\n-        <DataGrid\n-          apiRef={apiRef}\n           rows={rows}\n           {...data}\n           initialState={{ ...data.initialState, pagination: { rowCount: -1 } }}\n           estimatedRowCount={100}\n"
                },
                {
                    "date": 1717147368219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n   return (\n     <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n           \n-      <div style={{ height: 400,width: '100%'  }}>\n+      <div style={{ height: 700,width: '100%'  }}>\n         <DataGrid\n           \n           rows={rows}\n           {...data}\n"
                },
                {
                    "date": 1717147407395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n           rows={rows}\n           {...data}\n           initialState={{ ...data.initialState, pagination: { rowCount: -1 } }}\n           estimatedRowCount={100}\n-          paginationMeta={paginationMeta}\n+          \n           loading={isLoading}\n           pageSizeOptions={[10, 25, 50, 100]}\n           paginationModel={paginationModel}\n           paginationMode=\"server\"\n"
                },
                {
                    "date": 1717147425821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+'use client'\n+import React,{useEffect,useState} from \"react\";\n+\n+import Button from '@mui/material/Button';\n+import { DataGrid, useGridApiRef } from '@mui/x-data-grid';\n+import type { GridPaginationMeta } from '@mui/x-data-grid';\n+import { createFakeServer } from '@mui/x-data-grid-generator';\n+\n+const SERVER_OPTIONS = {\n+  useCursorPagination: false,\n+};\n+\n+const { useQuery, ...data } = createFakeServer({ rowLength: 1000 }, SERVER_OPTIONS);\n+\n+export default function Home() {\n+\n+  const apiRef = useGridApiRef();\n+  const [paginationModel, setPaginationModel] = React.useState({\n+    page: 0,\n+    pageSize: 50,\n+  });\n+\n+  const {\n+    isLoading,\n+    rows,\n+    pageInfo: { hasNextPage },\n+  } = useQuery(paginationModel);\n+\n+  const paginationMetaRef = React.useRef<GridPaginationMeta>({});\n+ \n+\n+\n+\n+  return (\n+    <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n+          \n+      <div style={{ height: 700,width: '100%'  }}>\n+        <DataGrid\n+          \n+          rows={rows}\n+          {...data}\n+          initialState={{ ...data.initialState, pagination: { rowCount: -1 } }}\n+          estimatedRowCount={100}\n+          \n+          loading={isLoading}\n+          pageSizeOptions={[10, 25, 50, 100]}\n+          paginationModel={paginationModel}\n+          paginationMode=\"server\"\n+          onPaginationModelChange={setPaginationModel}\n+        />\n+      </div>\n+    </main>\n+  );\n+}\n"
                },
                {
                    "date": 1717147494411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,76 +25,19 @@\n     rows,\n     pageInfo: { hasNextPage },\n   } = useQuery(paginationModel);\n \n-  const paginationMetaRef = React.useRef<GridPaginationMeta>({});\n+  \n  \n \n+  useEffect(() =>{\n \n \n-  return (\n-    <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n-          \n-      <div style={{ height: 700,width: '100%'  }}>\n-        <DataGrid\n-          \n-          rows={rows}\n-          {...data}\n-          initialState={{ ...data.initialState, pagination: { rowCount: -1 } }}\n-          estimatedRowCount={100}\n-          \n-          loading={isLoading}\n-          pageSizeOptions={[10, 25, 50, 100]}\n-          paginationModel={paginationModel}\n-          paginationMode=\"server\"\n-          onPaginationModelChange={setPaginationModel}\n-        />\n-      </div>\n-    </main>\n-  );\n-}\n-'use client'\n-import React,{useEffect,useState} from \"react\";\n+    console.log(\"paginationModel==page\",paginationModel.page);\n+    console.log(\"paginationModel==pageSize\",paginationModel.pageSize);\n+  },[paginationModel])\n \n-import Button from '@mui/material/Button';\n-import { DataGrid, useGridApiRef } from '@mui/x-data-grid';\n-import type { GridPaginationMeta } from '@mui/x-data-grid';\n-import { createFakeServer } from '@mui/x-data-grid-generator';\n \n-const SERVER_OPTIONS = {\n-  useCursorPagination: false,\n-};\n-\n-const { useQuery, ...data } = createFakeServer({ rowLength: 1000 }, SERVER_OPTIONS);\n-\n-export default function Home() {\n-\n-  const apiRef = useGridApiRef();\n-  const [paginationModel, setPaginationModel] = React.useState({\n-    page: 0,\n-    pageSize: 50,\n-  });\n-\n-  const {\n-    isLoading,\n-    rows,\n-    pageInfo: { hasNextPage },\n-  } = useQuery(paginationModel);\n-\n-  const paginationMetaRef = React.useRef<GridPaginationMeta>({});\n-  // Memoize to avoid flickering when the `hasNextPage` is `undefined` during refetch\n-  const paginationMeta = React.useMemo(() => {\n-    if (\n-      hasNextPage !== undefined &&\n-      paginationMetaRef.current?.hasNextPage !== hasNextPage\n-    ) {\n-      paginationMetaRef.current = { hasNextPage };\n-    }\n-    return paginationMetaRef.current;\n-  }, [hasNextPage]);\n-\n-\n-\n   return (\n     <main className=\"flex min-h-screen flex-col items-center justify-between p-24 bg-white\">\n           \n       <div style={{ height: 700,width: '100%'  }}>\n"
                },
                {
                    "date": 1717148197724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,11 @@\n \n \n     console.log(\"paginationModel==page\",paginationModel.page);\n     console.log(\"paginationModel==pageSize\",paginationModel.pageSize);\n+\n+    //点击下一页触发加载数据\n+    \n   },[paginationModel])\n \n \n   return (\n"
                }
            ],
            "date": 1717146470121,
            "name": "Commit-0",
            "content": "import Image from \"next/image\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      test\n    </main>\n  );\n}\n"
        }
    ]
}